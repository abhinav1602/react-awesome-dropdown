{
  "version": 3,
  "sources": [
    "index.jsx"
  ],
  "names": [
    "Dropdown",
    "props",
    "value",
    "defaultOptionVisible",
    "defaultOption",
    "undefined",
    "state",
    "setState",
    "onChange",
    "defaultOptionText",
    "options",
    "name",
    "ref",
    "className",
    "dropdown",
    "event",
    "_onChange",
    "target",
    "renderDefaultOption",
    "map",
    "opt",
    "index",
    "text",
    "propTypes",
    "PropTypes",
    "arrayOf",
    "shape",
    "string",
    "isRequired",
    "bool",
    "func"
  ],
  "mappings": ";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;IAQMA,Q;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA,oHACXA,KADW;;AAAA,sBAGuB,MAAKA,KAH5B;AAAA,QAGTC,KAHS,eAGTA,KAHS;AAAA,QAGFC,oBAHE,eAGFA,oBAHE;;;AAKjB,QAAMC,gBACJ,CAACD,wBAAwBE,SAAxB,IAAqCF,oBAAtC,MACC,CAACD,KAAD,IAAUA,SAAS,EADpB,CADF;;AAKA,UAAKI,KAAL,GAAa;AACXH,4BAAsBC;AADX,KAAb;AAViB;AAalB;;;;8BACSF,K,EAAO;AACf,WAAKK,QAAL,CAAc,EAAEJ,sBAAsB,KAAxB,EAAd;AACA,WAAKF,KAAL,CAAWO,QAAX,CAAoBN,KAApB;AACD;;;0CACqB;AACpB,UAAI,KAAKI,KAAL,CAAWH,oBAAf,EAAqC;AACnC,eACE;AAAA;AAAA,YAAQ,OAAM,EAAd;AAAkB,eAAKF,KAAL,CAAWQ,iBAAX,IAAgC;AAAlD,SADF;AAGD;AACF;;;6BACQ;AAAA;;AAAA,mBAOH,KAAKR,KAPF;AAAA,UAELS,OAFK,UAELA,OAFK;AAAA,UAGLR,KAHK,UAGLA,KAHK;AAAA,+BAILS,IAJK;AAAA,UAILA,IAJK,+BAIE,EAJF;AAAA,8BAKLC,GALK;AAAA,UAKLA,GALK,8BAKC,EALD;AAAA,oCAMLC,SANK;AAAA,UAMLA,SANK,oCAMO,EANP;;;AASP,aACE;AAAA;AAAA;AACE,qBAAW,0BAAW,iBAAOC,QAAlB,EAA4BD,SAA5B,CADb;AAEE,oBAAU,kBAACE,KAAD;AAAA,mBAAW,OAAKC,SAAL,CAAeD,MAAME,MAAN,CAAaf,KAA5B,CAAX;AAAA,WAFZ;AAGE,iBAAOA,KAHT;AAIE,gBAAMS,IAJR;AAKE,eAAKC;AALP;AAOG,aAAKM,mBAAL,EAPH;AAQGR,gBAAQS,GAAR,CAAY,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC3B,iBACE;AAAA;AAAA,cAAQ,OAAOD,IAAIlB,KAAnB,EAA0B,KAAKmB,KAA/B;AAAuCD,gBAAIE;AAA3C,WADF;AAGD,SAJA;AARH,OADF;AAgBD;;;;;;AAGHtB,SAASuB,SAAT,GAAqB;AACnBb,WAAS,gBAAMc,SAAN,CAAgBC,OAAhB,CAAwB,gBAAMD,SAAN,CAAgBE,KAAhB,CAAsB;AACrDxB,WAAO,gBAAMsB,SAAN,CAAgBG,MAAhB,CAAuBC,UADuB;AAErDN,UAAM,gBAAME,SAAN,CAAgBG,MAAhB,CAAuBC;AAFwB,GAAtB,CAAxB,EAGLA,UAJe;AAKnBf,aAAW,gBAAMW,SAAN,CAAgBG,MALR;AAMnBhB,QAAM,gBAAMa,SAAN,CAAgBG,MANH;AAOnBf,OAAK,gBAAMY,SAAN,CAAgBG,MAPF;AAQnBzB,SAAO,gBAAMsB,SAAN,CAAgBG,MARJ;AASnBxB,wBAAsB,gBAAMqB,SAAN,CAAgBK,IATnB;AAUnBpB,qBAAmB,gBAAMe,SAAN,CAAgBG,MAVhB;AAWnBnB,YAAU,gBAAMgB,SAAN,CAAgBM;AAXP,CAArB;;kBAce9B,Q",
  "file": "index.jsx",
  "sourceRoot": "../src/dropdown",
  "sourcesContent": [
    "import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\n\n/**\n * Dropdown - params:\n * options: Array of { value: string, text: string }\n * value: value of selected option (string)\n * defaultOptionVisible: if true it will render a default option as the first option of the dropdown.\n * defaultOptionText: text of default option\n * onChange: function to be called when the user selects a new option of the dropdown.\n*/\nclass Dropdown extends Component {\n  constructor(props) {\n    super(props);\n\n    const { value, defaultOptionVisible } = this.props;\n\n    const defaultOption =\n      (defaultOptionVisible == undefined || defaultOptionVisible) &&\n      (!value || value == '');\n\n\n    this.state = {\n      defaultOptionVisible: defaultOption\n    };\n  }\n  _onChange(value) {\n    this.setState({ defaultOptionVisible: false });\n    this.props.onChange(value);\n  }\n  renderDefaultOption() {\n    if (this.state.defaultOptionVisible) {\n      return (\n        <option value=''>{this.props.defaultOptionText || 'Select'}</option>\n      );\n    }\n  }\n  render() {\n    const {\n      options,\n      value,\n      name = '',\n      ref = '',\n      className = ''\n    } = this.props;\n\n    return (\n      <select\n        className={classnames(styles.dropdown, className)}\n        onChange={(event) => this._onChange(event.target.value)}\n        value={value}\n        name={name}\n        ref={ref}\n      >\n        {this.renderDefaultOption()}\n        {options.map((opt, index) => {\n          return (\n            <option value={opt.value} key={index}>{opt.text}</option>\n          );\n        })}\n      </select>\n    );\n  }\n}\n\nDropdown.propTypes = {\n  options: React.PropTypes.arrayOf(React.PropTypes.shape({\n    value: React.PropTypes.string.isRequired,\n    text: React.PropTypes.string.isRequired\n  })).isRequired,\n  className: React.PropTypes.string,\n  name: React.PropTypes.string,\n  ref: React.PropTypes.string,\n  value: React.PropTypes.string,\n  defaultOptionVisible: React.PropTypes.bool,\n  defaultOptionText: React.PropTypes.string,\n  onChange: React.PropTypes.func\n};\n\nexport default Dropdown;\n"
  ]
}
